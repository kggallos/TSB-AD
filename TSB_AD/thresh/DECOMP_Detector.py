# -*- coding: utf-8 -*-
# Author: Konstantinos Gallos <kggallos@gmail.com>
# License: Apache-2.0 License
"""
This code is adapted from [pythresh] by [KulikDM]
Original source: [https://github.com/KulikDM/pythresh]
"""

import pandas as pd
import numpy as np
import argparse, time

from TSB_AD.evaluation.metrics import get_metrics
from TSB_AD.utils.slidingWindows import find_length_rank

from sklearn.decomposition import NMF, PCA
from sklearn.random_projection import (
    GaussianRandomProjection,
    SparseRandomProjection
)

from .thresholding_utils import check_scores, normalize, gen_cdf

class DECOMP():
    """DECOMP class for Decomposition based thresholders.

       Use decomposition to evaluate a non-parametric means
       to threshold scores generated by the decision_scores where outliers
       are set to any value beyond the maximum of the decomposed
       matrix that results from decomposing the cumulative distribution
       function of the decision scores.
       See :cite:`boente2002decomp` for details

       Parameters
       ----------

       method : {'NMF', 'PCA', 'GRP', 'SRP'}, optional (default='PCA')
            Method to use for decomposition

            - 'NMF':  Non-Negative Matrix Factorization
            - 'PCA':  Principal Component Analysis
            - 'GRP':  Gaussian Random Projection
            - 'SRP':  Sparse Random Projection

       random_state : int, optional (default=1234)
            Random seed for the decomposition algorithm. Can also be set to None.

       Attributes
       ----------

        threshold_ : float
            The threshold value that separates inliers from outliers.

        decision_scores_: ndarray of shape (n_samples,) #TODO
            Not actually used, present for API consistency by convention.
            It contains 0s and 1s because this is a thresholding method.

       Examples
       --------
       The effects of randomness can affect the thresholder's output performance
       significantly. Therefore, to alleviate the effects of randomness on the
       thresholder a combined model can be used with different random_state values.
       E.g.

    """
    def __init__(self, method='PCA', random_state=1234, normalize=True):

        self.method = method
        self.method_funcs = {'NMF': NMF(n_components=1,
                                        random_state=random_state),
                             'PCA': PCA(n_components=1,
                                        random_state=random_state),
                             'GRP': GaussianRandomProjection(n_components=2,
                                                             random_state=random_state),
                             'SRP': SparseRandomProjection(n_components=3,
                                                           random_state=random_state)}
        self.random_state = random_state
        self.normalize = normalize

    def fit(self, X, y=None):
        """Fit detector. y is ignored in unsupervised methods.

        Parameters
        ----------
        X : numpy array of shape (n_samples, n_features)
            The input samples.

        y : Ignored
            Not used, present for API consistency by convention.

        Returns
        -------
        self : object
            Fitted estimator.
        """
        pass

    def decision_function(self, X):
        """    
        Not used, present for API consistency by convention.
        """
        pass
        
    def predict(self, X):
        """
        Predict anomalies in a batch of data points.

        Parameters
        ----------
        X : numpy array of shape (n_samples,)
            The input data points.

        Returns
        -------
        preds : numpy array of shape (n_samples,)
            Predictions (1 for anomaly, 0 for normal).
        """
        n_samples, n_features = X.shape

        X = check_scores(X, random_state=self.random_state)

        if self.normalize: X = normalize(X)

        # Generate a CDF of the decision scores
        val, dat_range = gen_cdf(X, 0, 1, len(X)*3)
        val = normalize(val)

        # Apply decomposition
        dec = self.method_funcs[str(self.method)].fit_transform(
            val.reshape(-1, 1))

        # Set limit to max value from decomposition matrix
        limit = np.max(dec)
        limit = 1-limit if limit > 0.5 else limit

        self.threshold_ = limit

        preds = np.zeros(n_samples, dtype=int)
        preds[X >= self.threshold_] = 1

        return preds


if __name__ == '__main__':

    Start_T = time.time()
    ## ArgumentParser
    parser = argparse.ArgumentParser(description='Running DECOMP')
    parser.add_argument('--filename', type=str, default='001_NAB_id_1_Facility_tr_1007_1st_2014.csv')
    parser.add_argument('--data_direc', type=str, default='Datasets/TSB-AD-U/')
    parser.add_argument('--AD_Name', type=str, default='DECOMP')
    args = parser.parse_args()

    # multivariate
    # parser.add_argument('--filename', type=str, default='057_SMD_id_1_Facility_tr_4529_1st_4629.csv')
    # parser.add_argument('--data_direc', type=str, default='Datasets/TSB-AD-M/')

    Custom_AD_HP = {
        'random_state': 1234,   # not related to method itself, but to formatting input
    }

    df = pd.read_csv(args.data_direc + args.filename).dropna()
    data = df.iloc[:, 0:-1].values.astype(float)
    label = df['Label'].astype(int).to_numpy()
    print('data: ', data.shape)
    print('label: ', label.shape)

    slidingWindow = find_length_rank(data, rank=1)
    train_index = args.filename.split('.')[0].split('_')[-3]
    data_train = data[:int(train_index), :]

    methods = ['NMF', 'PCA', 'GRP', 'SRP']
    for method in methods:
        print(f"\nRunning method: {method}")
        Custom_AD_HP['method'] = method
        clf = DECOMP(**Custom_AD_HP)
        output = clf.predict(data)
        pred = output
        evaluation_result = get_metrics(output, label, slidingWindow=slidingWindow, pred=pred)
        print('Evaluation Result: ', evaluation_result)
