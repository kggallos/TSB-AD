# -*- coding: utf-8 -*-
# Author: Konstantinos Gallos <kggallos@gmail.com>
# License: Apache-2.0 License
"""
This code is adapted from [pythresh] by [KulikDM]
Original source: [https://github.com/KulikDM/pythresh]
"""

import pandas as pd
import numpy as np
import argparse, time

from TSB_AD.evaluation.metrics import get_metrics
from TSB_AD.utils.slidingWindows import find_length_rank
from TSB_AD.models.base import BaseDetector

from .thresholding_utils import check_scores, normalize, gen_kde

class KARCH(BaseDetector):
    r"""KARCH class for Riemannian Center of Mass thresholder.

       Use the Karcher mean (Riemannian Center of Mass) to evaluate a
       non-parametric means to threshold scores generated by the
       decision_scores where outliers are set to any value beyond the
       Karcher mean + one standard deviation of the decision_scores.
       See :cite:`afsari2011karch` for details.

       Parameters
       ----------

       ndim : int, optional (default=2)
            Number of dimensions to construct the Euclidean manifold

       method : {'simple', 'complex'}, optional (default='complex')
            Method for computing the Karcher mean

            - 'simple':  Compute the Karcher mean using the 1D array of scores
            - 'complex': Compute the Karcher mean between a 2D array dot product of the scores and the sorted scores arrays

       random_state : int, optional (default=1234)
            Random seed for the random number generators of the thresholders. Can also
            be set to None.

       Attributes
       ----------

        threshold_ : float
            The threshold value that separates inliers from outliers.

        decision_scores_: ndarray of shape (n_samples,) #TODO
            Not actually used, present for API consistency by convention.
            It contains 0s and 1s because this is a thresholding method.

       Notes
       -----

       The non-weighted Karcher mean which is also the Riemannian center of
       mass or the Riemannian geometric mean is defined to be a minimizer of:

       .. math::

           f(x) = \sum_{i=1}^n \delta^2(A,x) \mathrm{,}

       where :math:`A` is a member of a special orthogonal group where the group qualities are
       :math:`\left(X \in \mathbb{R}^{n \times n} \vert X^{\top}X=I \text{,} \mathrm{det}X=1 \right)`
       such that the group is a Lie group.

    """

    def __init__(self, ndim=2, method='complex',
                 random_state=1234, normalize=True):

        self.ndim = ndim
        self.method = method
        self.random_state = random_state
        self.normalize = normalize

    def fit(self, X, y=None):
        """Fit detector. y is ignored in unsupervised methods.

        Parameters
        ----------
        X : numpy array of shape (n_samples, n_features)
            The input samples.

        y : Ignored
            Not used, present for API consistency by convention.

        Returns
        -------
        self : object
            Fitted estimator.
        """
        pass

    def decision_function(self, X):
        """    
        Not used, present for API consistency by convention.
        """
        pass
        
    def predict(self, X):
        """
        Predict anomalies in a batch of data points.

        Parameters
        ----------
        X : numpy array of shape (n_samples,)
            The input data points.

        Returns
        -------
        preds : numpy array of shape (n_samples,)
            Predictions (1 for anomaly, 0 for normal).
        """
        n_samples, n_features = X.shape

        X = check_scores(X, random_state=self.random_state)

        if self.normalize: X = normalize(X)

        if self.method == 'complex':

            # Create kde of scores
            val_data, _ = gen_kde(X, 0, 1, len(X))
            val_data = val_data.reshape(-1, 1)
            val_norm = np.sort(X).reshape(1, -1)

            try:
                # find kde and score dot product and solve the
                vals = np.dot(val_data, val_norm)
                fmean = self._frechet_mean(vals)

            except ValueError:
                fmean = self._frechet_mean(X.reshape(1, -1))
        else:
            fmean = self._frechet_mean(X.reshape(1, -1))

        # Get the mean of each dimension's Karcher mean
        limit = np.mean(fmean) + np.std(X)

        self.threshold_ = limit

        preds = np.zeros(n_samples, dtype=int)
        preds[X >= self.threshold_] = 1

        return preds

    # Adapted from https://github.com/geomstats/geomstats/blob/main/geomstats/learning/frechet_mean.py
    def _frechet_mean(self, points, weights=None):
        """Compute the Frechet mean in a Euclidean space."""
        if weights is None:
            n_points = np.shape(points)[0]
            weights = np.ones(n_points)

        sum_weights = np.sum(weights)

        weighted_points = np.einsum('n,n...->n...', weights, points)

        mean = np.sum(weighted_points, axis=0) / sum_weights
        return mean


if __name__ == '__main__':

    Start_T = time.time()
    ## ArgumentParser
    parser = argparse.ArgumentParser(description='Running MAD')
    parser.add_argument('--filename', type=str, default='001_NAB_id_1_Facility_tr_1007_1st_2014.csv')
    parser.add_argument('--data_direc', type=str, default='Datasets/TSB-AD-U/')
    parser.add_argument('--AD_Name', type=str, default='MAD')
    args = parser.parse_args()

    Custom_AD_HP = {
        'random_state': 1234,   # not related to method itself, but to formatting input
        'ndim': 2,
    }

    df = pd.read_csv(args.data_direc + args.filename).dropna()
    data = df.iloc[:, 0:-1].values.astype(float)
    label = df['Label'].astype(int).to_numpy()
    print('data: ', data.shape)
    print('label: ', label.shape)

    slidingWindow = find_length_rank(data, rank=1)
    train_index = args.filename.split('.')[0].split('_')[-3]
    data_train = data[:int(train_index), :]
    data_test = data[int(train_index):, :]
    label_test = label[int(train_index):]

    start_time = time.time()

    print("------- ON TEST DATA -------")
    methods = ['simple', 'complex']
    for method in methods:
        print(f"\nRunning method: {method}")
        Custom_AD_HP['method'] = method
        clf = KARCH(**Custom_AD_HP)
        # clf.fit(data_train)
        output = clf.predict(data_test)
        pred = output   # output has already the predictions

        end_time = time.time()
        run_time = end_time - start_time

        evaluation_result = get_metrics(output, label_test, slidingWindow=slidingWindow, pred=pred)
        print('Evaluation Result: ', evaluation_result)

    ####!
    # print("------- ON WHOLE DATA -------")
    # clf = KARCH()
    # # clf.fit(data)
    # output = clf.predict(data)
    # pred = output
    # evaluation_result = get_metrics(output, label, slidingWindow=slidingWindow, pred=pred)
    # print('Evaluation Result: ', evaluation_result)
